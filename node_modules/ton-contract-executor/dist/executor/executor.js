"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSelectorForMethod = exports.runContract = exports.runTVM = exports.buildC7 = void 0;
const ton_1 = require("ton");
const crc16_1 = require("../utils/crc16");
const vmExec_1 = require("../vm-exec/vmExec");
const crypto_1 = require("crypto");
const bn_js_1 = __importDefault(require("bn.js"));
const cell_1 = require("../utils/cell");
const makeIntEntry = (value) => ({ type: 'int', value: value.toString(10) });
const makeTuple = (items) => ({ type: 'tuple', value: items });
const makeNull = () => ({ type: 'null' });
const makeCell = (cell) => ({ type: 'cell', value: (0, cell_1.cellToBoc)(cell) });
const makeSlice = (cell) => ({ type: 'cell_slice', value: (0, cell_1.cellToBoc)(cell) });
function buildC7(config) {
    let now = Math.floor(Date.now() / 1000);
    let seed = (0, crypto_1.randomBytes)(32);
    let seedInt = new bn_js_1.default(seed);
    let currentConfig = {
        unixtime: now,
        balance: new bn_js_1.default(1000),
        myself: new ton_1.Address(0, Buffer.alloc(256 / 8)),
        randSeed: seedInt,
        actions: 0,
        messagesSent: 0,
        blockLt: now,
        transLt: now,
        globalConfig: new ton_1.Cell(),
        ...config
    };
    // addr_std$10 anycast:(Maybe Anycast)
    //    workchain_id:int8 address:bits256  = MsgAddressInt;
    // workchain_id:int8 address:bits256  = MsgAddressInt;
    let addressCell = new ton_1.Cell();
    addressCell.bits.writeAddress(currentConfig.myself);
    // [Integer (Maybe Cell)]
    let balance = makeTuple([makeIntEntry(currentConfig.balance), makeNull()]);
    return makeTuple([
        makeTuple([
            makeIntEntry(0x076ef1ea),
            makeIntEntry(currentConfig.actions),
            makeIntEntry(currentConfig.messagesSent),
            makeIntEntry(currentConfig.unixtime),
            makeIntEntry(currentConfig.blockLt),
            makeIntEntry(currentConfig.transLt),
            makeIntEntry(currentConfig.randSeed),
            balance,
            makeSlice(addressCell),
            makeCell(currentConfig.globalConfig), // global_config:(Maybe Cell) ] = SmartContractInfo;
        ])
    ]);
}
exports.buildC7 = buildC7;
async function runTVM(config) {
    return await (0, vmExec_1.vm_exec)(config);
}
exports.runTVM = runTVM;
async function runContract(config) {
    let { code, dataCell, stack, method, c7, debug, executor } = config;
    let executorConfig = {
        debug,
        function_selector: getSelectorForMethod(method),
        init_stack: stack,
        code: (0, cell_1.cellToBoc)(code),
        data: (0, cell_1.cellToBoc)(dataCell),
        c7_register: c7
    };
    let res;
    if (!executor) {
        res = await runTVM(executorConfig);
    }
    else {
        res = await executor.invoke(executorConfig);
    }
    return res;
}
exports.runContract = runContract;
function getSelectorForMethod(methodName) {
    if (methodName === 'main') {
        return 0;
    }
    else if (methodName === 'recv_internal') {
        return 0;
    }
    else if (methodName === 'recv_external') {
        return -1;
    }
    else {
        return ((0, crc16_1.crc16)(methodName) & 0xffff) | 0x10000;
    }
}
exports.getSelectorForMethod = getSelectorForMethod;
