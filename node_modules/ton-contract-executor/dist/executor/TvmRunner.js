"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TvmRunnerAsynchronous = exports.TvmRunnerSynchronous = void 0;
const executor_1 = require("./executor");
const executorPool_1 = require("./workerPool/executorPool");
const os = __importStar(require("os"));
class TvmRunnerSynchronous {
    async invoke(config) {
        return await (0, executor_1.runTVM)(config);
    }
}
exports.TvmRunnerSynchronous = TvmRunnerSynchronous;
class TvmRunnerAsynchronous {
    pool;
    static shared = null;
    constructor(workersCount) {
        this.pool = new executorPool_1.ExecutorPool(workersCount);
    }
    async invoke(config) {
        return await this.pool.execute(config);
    }
    static getShared() {
        if (!TvmRunnerAsynchronous.shared) {
            let workersCount = Math.max(2, os.cpus().length / 2);
            TvmRunnerAsynchronous.shared = new TvmRunnerAsynchronous(workersCount);
        }
        return TvmRunnerAsynchronous.shared;
    }
}
exports.TvmRunnerAsynchronous = TvmRunnerAsynchronous;
