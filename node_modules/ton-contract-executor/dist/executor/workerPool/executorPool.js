"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExecutorPool = void 0;
const worker_threads_1 = require("worker_threads");
const getWorker = () => {
    if (__filename.endsWith('.ts')) {
        return new worker_threads_1.Worker(__dirname + '/worker.js', {
            workerData: {
                path: './executorWorker.ts'
            }
        });
    }
    else {
        return new worker_threads_1.Worker(__dirname + '/executorWorker.js');
    }
};
class ExecutorPool {
    reqNo = 0;
    workers = [];
    tasks = new Map();
    constructor(size) {
        this.setupWorkers(size);
    }
    setupWorkers(size) {
        for (let i = 0; i < size; i++) {
            let worker = getWorker();
            worker.on('message', msg => this.onWorkerMessage(msg));
            this.workers.push(worker);
        }
    }
    onWorkerMessage(message) {
        let cb = this.tasks.get(message.id);
        if (!cb) {
            throw new Error('No callback was found for response: ' + JSON.stringify(message));
        }
        cb(message.result);
        this.tasks.delete(message.id);
    }
    execute(config) {
        let requestId = this.reqNo++;
        let worker = this.workers[requestId % this.workers.length];
        worker.postMessage({
            id: requestId,
            config
        });
        return new Promise(resolve => {
            this.tasks.set(requestId, resolve);
        });
    }
}
exports.ExecutorPool = ExecutorPool;
