import { Cell, ExternalMessage, InternalMessage, Slice } from "ton";
import { C7Config, TVMStack, TVMStackEntryTuple } from "../executor/executor";
import BN from "bn.js";
import { TvmRunner } from "../executor/TvmRunner";
import { OutAction } from "../utils/parseActionList";
declare type NormalizedStackEntry = null | Cell | Slice | BN | NormalizedStackEntry[];
declare type SmartContractConfig = {
    getMethodsMutate: boolean;
    debug: boolean;
    runner: TvmRunner;
};
declare type FailedExecutionResult = {
    type: 'failed';
    exit_code: number;
    gas_consumed: number;
    result: NormalizedStackEntry[];
    actionList: OutAction[];
    action_list_cell?: Cell;
    logs: string;
};
declare type SuccessfulExecutionResult = {
    type: 'success';
    exit_code: number;
    gas_consumed: number;
    result: NormalizedStackEntry[];
    actionList: OutAction[];
    action_list_cell?: Cell;
    logs: string;
};
declare type ExecutionResult = FailedExecutionResult | SuccessfulExecutionResult;
export declare class SmartContract {
    codeCell: Cell;
    dataCell: Cell;
    private codeCellBoc;
    private dataCellBoc;
    private config;
    private c7Config;
    private c7;
    private constructor();
    private runContract;
    invokeGetMethod(method: string, args: TVMStack): Promise<ExecutionResult>;
    sendInternalMessage(message: InternalMessage): Promise<ExecutionResult>;
    sendExternalMessage(message: ExternalMessage): Promise<ExecutionResult>;
    setUnixTime(time: number): void;
    setBalance(value: BN): void;
    setC7Config(conf: C7Config): void;
    setC7(c7: TVMStackEntryTuple): void;
    getC7(): TVMStackEntryTuple;
    setDataCell(dataCell: Cell): void;
    setCodeCell(codeCell: Cell): void;
    static fromFuncSource(source: string, dataCell: Cell, config?: Partial<SmartContractConfig>): Promise<SmartContract>;
    static fromCell(codeCell: Cell, dataCell: Cell, config?: Partial<SmartContractConfig>): Promise<SmartContract>;
}
export {};
