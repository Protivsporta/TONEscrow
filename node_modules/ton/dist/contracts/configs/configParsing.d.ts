/// <reference types="node" />
import BN from "bn.js";
import { Address, Slice } from "../..";
export declare function configParseMasterAddress(slice: Slice | null | undefined): Address | null;
export declare function configParseWorkchainDescriptor(slice: Slice): {
    enabledSince: number;
    actialMinSplit: number;
    min_split: number;
    max_split: number;
    basic: boolean;
    active: boolean;
    accept_msgs: boolean;
    flags: number;
    zerostateRootHash: Buffer;
    zerostateFileHash: Buffer;
    version: number;
    format: {
        vmVersion: number;
        vmMode: BN;
    };
};
export declare function parseValidatorDescr(slice: Slice): {
    publicKey: Buffer;
    weight: BN;
    adnlAddress: null;
} | {
    publicKey: Buffer;
    weight: BN;
    adnlAddress: Buffer;
};
export declare function parseValidatorSet(slice: Slice): {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: null;
    list: Map<string, {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: Buffer;
    }>;
} | {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: BN;
    list: Map<string, {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: Buffer;
    }> | null;
} | undefined;
export declare function parseBridge(slice: Slice): {
    bridgeAddress: Buffer;
    oracleMultisigAddress: Buffer;
    oracles: Map<string, Buffer> | null;
    externalChainAddress: Buffer;
};
export declare function configParseMasterAddressRequired(slice: Slice | null | undefined): Address;
export declare function configParse15(slice: Slice | null | undefined): {
    validatorsElectedFor: number;
    electorsStartBefore: number;
    electorsEndBefore: number;
    stakeHeldFor: number;
};
export declare function configParse16(slice: Slice | null | undefined): {
    maxValidators: number;
    maxMainValidators: number;
    minValidators: number;
};
export declare function configParse17(slice: Slice | null | undefined): {
    minStake: BN;
    maxStake: BN;
    minTotalStake: BN;
    maxStakeFactor: number;
};
export declare type StoragePrices = {
    utime_since: BN;
    bit_price_ps: BN;
    cell_price_ps: BN;
    mc_bit_price_ps: BN;
    mc_cell_price_ps: BN;
};
export declare function configParse18(slice: Slice | null | undefined): StoragePrices[];
export declare function configParse8(slice: Slice | null | undefined): {
    version: number;
    capabilities: BN;
};
export declare function configParse40(slice: Slice | null | undefined): {
    defaultFlatFine: BN;
    defaultProportionaFine: BN;
    severityFlatMult: number;
    severityProportionalMult: number;
    unfunishableInterval: number;
    longInterval: number;
    longFlatMult: number;
    longProportionalMult: number;
    mediumInterval: number;
    mediumFlatMult: number;
    mediumProportionalMult: number;
} | null;
export declare function configParse12(slice: Slice | null | undefined): Map<string, {
    enabledSince: number;
    actialMinSplit: number;
    min_split: number;
    max_split: number;
    basic: boolean;
    active: boolean;
    accept_msgs: boolean;
    flags: number;
    zerostateRootHash: Buffer;
    zerostateFileHash: Buffer;
    version: number;
    format: {
        vmVersion: number;
        vmMode: BN;
    };
}>;
export declare function configParseValidatorSet(slice: Slice | null | undefined): {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: null;
    list: Map<string, {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: Buffer;
    }>;
} | {
    timeSince: number;
    timeUntil: number;
    total: number;
    main: number;
    totalWeight: BN;
    list: Map<string, {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: null;
    } | {
        publicKey: Buffer;
        weight: BN;
        adnlAddress: Buffer;
    }> | null;
} | null | undefined;
export declare function configParseBridge(slice: Slice | null | undefined): {
    bridgeAddress: Buffer;
    oracleMultisigAddress: Buffer;
    oracles: Map<string, Buffer> | null;
    externalChainAddress: Buffer;
} | null;
export declare type GasLimitsPrices = ReturnType<typeof configParseGasLimitsPrices>;
export declare function configParseGasLimitsPrices(slice: Slice | null | undefined): {
    flatLimit: BN;
    flatGasPrice: BN;
    other: {
        gasPrice: BN;
        gasLimit: BN;
        specialGasLimit: BN;
        gasCredit: BN;
        blockGasLimit: BN;
        freezeDueLimit: BN;
        deleteDueLimit: BN;
    } | {
        gasPrice: BN;
        gasLimit: BN;
        gasCredit: BN;
        blockGasLimit: BN;
        freezeDueLimit: BN;
        deleteDueLimit: BN;
        specialGasLimit?: undefined;
    };
};
export declare type MsgPrices = ReturnType<typeof configParseMsgPrices>;
export declare function configParseMsgPrices(slice: Slice | null | undefined): {
    lumpPrice: BN;
    bitPrice: BN;
    cellPrice: BN;
    ihrPriceFactor: BN;
    firstFrac: BN;
    nextFrac: BN;
};
export declare function configParse28(slice: Slice | null | undefined): {
    masterCatchainLifetime: number;
    shardCatchainLifetime: number;
    shardValidatorsLifetime: number;
    shardValidatorsCount: number;
    flags?: undefined;
    suffleMasterValidators?: undefined;
} | {
    flags: number;
    suffleMasterValidators: boolean;
    masterCatchainLifetime: number;
    shardCatchainLifetime: number;
    shardValidatorsLifetime: number;
    shardValidatorsCount: number;
};
export declare function configParse29(slice: Slice | null | undefined): {
    roundCandidates: number;
    nextCandidateDelay: number;
    consensusTimeout: number;
    fastAttempts: number;
    attemptDuration: number;
    catchainMaxDeps: number;
    maxBlockBytes: number;
    maxColaltedBytes: number;
    flags?: undefined;
    newCatchainIds?: undefined;
    protoVersion?: undefined;
} | {
    flags: number;
    newCatchainIds: boolean;
    roundCandidates: number;
    nextCandidateDelay: number;
    consensusTimeout: number;
    fastAttempts: number;
    attemptDuration: number;
    catchainMaxDeps: number;
    maxBlockBytes: number;
    maxColaltedBytes: number;
    protoVersion?: undefined;
} | {
    flags: number;
    newCatchainIds: boolean;
    roundCandidates: number;
    nextCandidateDelay: number;
    consensusTimeout: number;
    fastAttempts: number;
    attemptDuration: number;
    catchainMaxDeps: number;
    maxBlockBytes: number;
    maxColaltedBytes: number;
    protoVersion: number;
};
export declare function parseProposalSetup(slice: Slice): {
    minTotalRounds: number;
    maxTotalRounds: number;
    minWins: number;
    maxLoses: number;
    minStoreSec: number;
    maxStoreSec: number;
    bitPrice: number;
    cellPrice: number;
};
export declare function parseVotingSetup(slice: Slice | null | undefined): {
    normalParams: {
        minTotalRounds: number;
        maxTotalRounds: number;
        minWins: number;
        maxLoses: number;
        minStoreSec: number;
        maxStoreSec: number;
        bitPrice: number;
        cellPrice: number;
    };
    criticalParams: {
        minTotalRounds: number;
        maxTotalRounds: number;
        minWins: number;
        maxLoses: number;
        minStoreSec: number;
        maxStoreSec: number;
        bitPrice: number;
        cellPrice: number;
    };
};
export declare function parseFullConfig(configs: Map<string, Slice>): {
    configAddress: Address;
    electorAddress: Address;
    minterAddress: Address | null;
    feeCollectorAddress: Address | null;
    dnsRootAddress: Address | null;
    globalVersion: {
        version: number;
        capabilities: BN;
    };
    workchains: Map<string, {
        enabledSince: number;
        actialMinSplit: number;
        min_split: number;
        max_split: number;
        basic: boolean;
        active: boolean;
        accept_msgs: boolean;
        flags: number;
        zerostateRootHash: Buffer;
        zerostateFileHash: Buffer;
        version: number;
        format: {
            vmVersion: number;
            vmMode: BN;
        };
    }>;
    voting: {
        normalParams: {
            minTotalRounds: number;
            maxTotalRounds: number;
            minWins: number;
            maxLoses: number;
            minStoreSec: number;
            maxStoreSec: number;
            bitPrice: number;
            cellPrice: number;
        };
        criticalParams: {
            minTotalRounds: number;
            maxTotalRounds: number;
            minWins: number;
            maxLoses: number;
            minStoreSec: number;
            maxStoreSec: number;
            bitPrice: number;
            cellPrice: number;
        };
    };
    validators: {
        minStake: BN;
        maxStake: BN;
        minTotalStake: BN;
        maxStakeFactor: number;
        maxValidators: number;
        maxMainValidators: number;
        minValidators: number;
        validatorsElectedFor: number;
        electorsStartBefore: number;
        electorsEndBefore: number;
        stakeHeldFor: number;
    };
    storagePrices: StoragePrices[];
    gasPrices: {
        masterchain: {
            flatLimit: BN;
            flatGasPrice: BN;
            other: {
                gasPrice: BN;
                gasLimit: BN;
                specialGasLimit: BN;
                gasCredit: BN;
                blockGasLimit: BN;
                freezeDueLimit: BN;
                deleteDueLimit: BN;
            } | {
                gasPrice: BN;
                gasLimit: BN;
                gasCredit: BN;
                blockGasLimit: BN;
                freezeDueLimit: BN;
                deleteDueLimit: BN;
                specialGasLimit?: undefined;
            };
        };
        workchain: {
            flatLimit: BN;
            flatGasPrice: BN;
            other: {
                gasPrice: BN;
                gasLimit: BN;
                specialGasLimit: BN;
                gasCredit: BN;
                blockGasLimit: BN;
                freezeDueLimit: BN;
                deleteDueLimit: BN;
            } | {
                gasPrice: BN;
                gasLimit: BN;
                gasCredit: BN;
                blockGasLimit: BN;
                freezeDueLimit: BN;
                deleteDueLimit: BN;
                specialGasLimit?: undefined;
            };
        };
    };
    msgPrices: {
        masterchain: {
            lumpPrice: BN;
            bitPrice: BN;
            cellPrice: BN;
            ihrPriceFactor: BN;
            firstFrac: BN;
            nextFrac: BN;
        };
        workchain: {
            lumpPrice: BN;
            bitPrice: BN;
            cellPrice: BN;
            ihrPriceFactor: BN;
            firstFrac: BN;
            nextFrac: BN;
        };
    };
    validatorSets: {
        prevValidators: {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: null;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }>;
        } | {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: BN;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }> | null;
        } | null | undefined;
        prevTempValidators: {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: null;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }>;
        } | {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: BN;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }> | null;
        } | null | undefined;
        currentValidators: {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: null;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }>;
        } | {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: BN;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }> | null;
        } | null | undefined;
        currentTempValidators: {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: null;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }>;
        } | {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: BN;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }> | null;
        } | null | undefined;
        nextValidators: {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: null;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }>;
        } | {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: BN;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }> | null;
        } | null | undefined;
        nextTempValidators: {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: null;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }>;
        } | {
            timeSince: number;
            timeUntil: number;
            total: number;
            main: number;
            totalWeight: BN;
            list: Map<string, {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: null;
            } | {
                publicKey: Buffer;
                weight: BN;
                adnlAddress: Buffer;
            }> | null;
        } | null | undefined;
    };
    validatorsPunish: {
        defaultFlatFine: BN;
        defaultProportionaFine: BN;
        severityFlatMult: number;
        severityProportionalMult: number;
        unfunishableInterval: number;
        longInterval: number;
        longFlatMult: number;
        longProportionalMult: number;
        mediumInterval: number;
        mediumFlatMult: number;
        mediumProportionalMult: number;
    } | null;
    bridges: {
        ethereum: {
            bridgeAddress: Buffer;
            oracleMultisigAddress: Buffer;
            oracles: Map<string, Buffer> | null;
            externalChainAddress: Buffer;
        } | null;
        binance: {
            bridgeAddress: Buffer;
            oracleMultisigAddress: Buffer;
            oracles: Map<string, Buffer> | null;
            externalChainAddress: Buffer;
        } | null;
        polygon: {
            bridgeAddress: Buffer;
            oracleMultisigAddress: Buffer;
            oracles: Map<string, Buffer> | null;
            externalChainAddress: Buffer;
        } | null;
    };
    catchain: {
        masterCatchainLifetime: number;
        shardCatchainLifetime: number;
        shardValidatorsLifetime: number;
        shardValidatorsCount: number;
        flags?: undefined;
        suffleMasterValidators?: undefined;
    } | {
        flags: number;
        suffleMasterValidators: boolean;
        masterCatchainLifetime: number;
        shardCatchainLifetime: number;
        shardValidatorsLifetime: number;
        shardValidatorsCount: number;
    };
    consensus: {
        roundCandidates: number;
        nextCandidateDelay: number;
        consensusTimeout: number;
        fastAttempts: number;
        attemptDuration: number;
        catchainMaxDeps: number;
        maxBlockBytes: number;
        maxColaltedBytes: number;
        flags?: undefined;
        newCatchainIds?: undefined;
        protoVersion?: undefined;
    } | {
        flags: number;
        newCatchainIds: boolean;
        roundCandidates: number;
        nextCandidateDelay: number;
        consensusTimeout: number;
        fastAttempts: number;
        attemptDuration: number;
        catchainMaxDeps: number;
        maxBlockBytes: number;
        maxColaltedBytes: number;
        protoVersion?: undefined;
    } | {
        flags: number;
        newCatchainIds: boolean;
        roundCandidates: number;
        nextCandidateDelay: number;
        consensusTimeout: number;
        fastAttempts: number;
        attemptDuration: number;
        catchainMaxDeps: number;
        maxBlockBytes: number;
        maxColaltedBytes: number;
        protoVersion: number;
    };
};
