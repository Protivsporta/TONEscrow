"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigContract = void 0;
const __1 = require("..");
const BitStringReader_1 = require("../boc/BitStringReader");
const Builder_1 = require("../boc/Builder");
const parseDict_1 = require("../boc/dict/parseDict");
const configParsing_1 = require("./configs/configParsing");
class ConfigContract {
    constructor(client) {
        this.address = __1.Address.parseRaw('-1:5555555555555555555555555555555555555555555555555555555555555555');
        this.source = new __1.UnknownContractSource('org.ton.config', -1, 'Config Contract');
        this.client = client;
    }
    async getSeqNo() {
        let res = await this.client.callGetMethod(this.address, 'seqno');
        return parseInt(res.stack[0][1], 16);
    }
    async getPublicKey() {
        let data = (await this.client.getContractState(this.address)).data;
        let cell = __1.Cell.fromBoc(data)[0];
        let reader = new BitStringReader_1.BitStringReader(cell.bits);
        reader.readUint(32); // Seqno
        return reader.readUint(256); // Public Key
    }
    async getConfigsRaw() {
        let data = (await this.client.getContractState(this.address)).data;
        let slice = __1.Cell.fromBoc(data)[0].beginParse();
        let dict = slice.readRef();
        let res = (0, parseDict_1.parseDictRefs)(dict, 32);
        return res;
    }
    async getConfigs() {
        let configs = await this.getConfigsRaw();
        return (0, configParsing_1.parseFullConfig)(configs);
    }
    async createProposal(args) {
        return (0, Builder_1.beginCell)()
            .storeUint(0x6e565052, 32)
            .storeUint(args.queryId, 64)
            .storeUint(args.expiresAt, 32)
            .storeRef((0, Builder_1.beginCell)()
            .storeUint(0xf3, 8)
            .storeUint(args.paramId, 32)
            .storeRefMaybe(args.paramValue)
            .storeRefMaybe(args.ifHashEqual)
            .endCell())
            .storeBit(args.critical)
            .endCell();
    }
}
exports.ConfigContract = ConfigContract;
