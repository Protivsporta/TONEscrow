"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TonClient4_endpoint, _TonClient4_timeout, _TonClient4_adapter;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TonClient4 = void 0;
const axios_1 = __importDefault(require("axios"));
const t = __importStar(require("io-ts"));
const stack_1 = require("../block/stack");
const Cell_1 = require("../boc/Cell");
const toUrlSafe_1 = require("../utils/toUrlSafe");
class TonClient4 {
    constructor(args) {
        _TonClient4_endpoint.set(this, void 0);
        _TonClient4_timeout.set(this, void 0);
        _TonClient4_adapter.set(this, void 0);
        __classPrivateFieldSet(this, _TonClient4_endpoint, args.endpoint, "f");
        __classPrivateFieldSet(this, _TonClient4_timeout, args.timeout || 5000, "f");
        __classPrivateFieldSet(this, _TonClient4_adapter, args.httpAdapter, "f");
    }
    async getLastBlock() {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/latest', { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!lastBlockCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return res.data;
    }
    async getBlock(seqno) {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!blockCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        if (!res.data.exist) {
            throw Error('Block is out of scope');
        }
        return res.data.block;
    }
    async getBlockByUtime(ts) {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/utime/' + ts, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!blockCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        if (!res.data.exist) {
            throw Error('Block is out of scope');
        }
        return res.data.block;
    }
    async getAccount(seqno, address) {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toFriendly({ urlSafe: true }), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!accountCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return res.data;
    }
    async getAccountLite(seqno, address) {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toFriendly({ urlSafe: true }) + '/lite', { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!accountLiteCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return res.data;
    }
    async isAccountChanged(seqno, address, lt) {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toFriendly({ urlSafe: true }) + '/changed/' + lt.toString(10), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!changedCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return res.data;
    }
    async getAccountTransactions(address, lt, hash) {
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/account/' + address.toFriendly({ urlSafe: true }) + '/tx/' + lt.toString(10) + '/' + (0, toUrlSafe_1.toUrlSafe)(hash.toString('base64')), { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!transactionsCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        let data = res.data;
        let tx = [];
        let cells = Cell_1.Cell.fromBoc(Buffer.from(data.boc, 'base64'));
        for (let i = 0; i < data.blocks.length; i++) {
            tx.push({
                block: data.blocks[i],
                tx: cells[i]
            });
        }
        return tx;
    }
    async getConfig(seqno, ids) {
        let tail = '';
        if (ids && ids.length > 0) {
            tail = '/' + [...ids].sort().join(',');
        }
        let res = await axios_1.default.get(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/config' + tail, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!configCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return res.data;
    }
    async runMethod(seqno, address, name, args) {
        let tail = args && args.length > 0 ? '/' + (0, toUrlSafe_1.toUrlSafe)((0, stack_1.serializeStack)(args).toBoc({ idx: false, crc32: false }).toString('base64')) : '';
        let url = __classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/block/' + seqno + '/' + address.toFriendly({ urlSafe: true }) + '/run/' + name + tail;
        let res = await axios_1.default.get(url, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!runMethodCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return {
            exitCode: res.data.exitCode,
            result: res.data.resultRaw ? (0, stack_1.parseStack)(Cell_1.Cell.fromBoc(Buffer.from(res.data.resultRaw, 'base64'))[0]) : [],
            resultRaw: res.data.resultRaw,
            block: res.data.block,
            shardBlock: res.data.shardBlock,
        };
    }
    async sendMessage(message) {
        let res = await axios_1.default.post(__classPrivateFieldGet(this, _TonClient4_endpoint, "f") + '/send', { boc: message.toString('base64') }, { adapter: __classPrivateFieldGet(this, _TonClient4_adapter, "f"), timeout: __classPrivateFieldGet(this, _TonClient4_timeout, "f") });
        if (!sendCodec.is(res.data)) {
            throw Error('Mailformed response');
        }
        return { status: res.data.status };
    }
}
exports.TonClient4 = TonClient4;
_TonClient4_endpoint = new WeakMap(), _TonClient4_timeout = new WeakMap(), _TonClient4_adapter = new WeakMap();
//
// Codecs
//
const lastBlockCodec = t.type({
    last: t.type({
        seqno: t.number,
        shard: t.string,
        workchain: t.number,
        fileHash: t.string,
        rootHash: t.string
    }),
    init: t.type({
        fileHash: t.string,
        rootHash: t.string
    }),
    stateRootHash: t.string,
    now: t.number
});
const blockCodec = t.union([t.type({
        exist: t.literal(false)
    }), t.type({
        exist: t.literal(true),
        block: t.type({
            shards: t.array(t.type({
                workchain: t.number,
                seqno: t.number,
                shard: t.string,
                rootHash: t.string,
                fileHash: t.string,
                transactions: t.array(t.type({
                    account: t.string,
                    hash: t.string,
                    lt: t.string
                }))
            }))
        })
    })]);
// {"lastPaid":1653099243,"duePayment":null,"used":{"bits":119,"cells":1,"publicCells":0}}
const storageStatCodec = t.type({
    lastPaid: t.number,
    duePayment: t.union([t.null, t.string]),
    used: t.type({
        bits: t.number,
        cells: t.number,
        publicCells: t.number
    })
});
const accountCodec = t.type({
    account: t.type({
        state: t.union([
            t.type({ type: t.literal('uninit') }),
            t.type({ type: t.literal('active'), code: t.union([t.string, t.null]), data: t.union([t.string, t.null]) }),
            t.type({ type: t.literal('frozen'), stateHash: t.string })
        ]),
        balance: t.type({
            coins: t.string
        }),
        last: t.union([
            t.null,
            t.type({
                lt: t.string,
                hash: t.string
            })
        ]),
        storageStat: t.union([t.null, storageStatCodec])
    }),
    block: t.type({
        workchain: t.number,
        seqno: t.number,
        shard: t.string,
        rootHash: t.string,
        fileHash: t.string
    })
});
const accountLiteCodec = t.type({
    account: t.type({
        state: t.union([
            t.type({ type: t.literal('uninit') }),
            t.type({ type: t.literal('active'), codeHash: t.string, dataHash: t.string }),
            t.type({ type: t.literal('frozen'), stateHash: t.string })
        ]),
        balance: t.type({
            coins: t.string
        }),
        last: t.union([
            t.null,
            t.type({
                lt: t.string,
                hash: t.string
            })
        ]),
        storageStat: t.union([t.null, storageStatCodec])
    })
});
const changedCodec = t.type({
    changed: t.boolean,
    block: t.type({
        workchain: t.number,
        seqno: t.number,
        shard: t.string,
        rootHash: t.string,
        fileHash: t.string
    })
});
const runMethodCodec = t.type({
    exitCode: t.number,
    resultRaw: t.union([t.string, t.null]),
    block: t.type({
        workchain: t.number,
        seqno: t.number,
        shard: t.string,
        rootHash: t.string,
        fileHash: t.string
    }),
    shardBlock: t.type({
        workchain: t.number,
        seqno: t.number,
        shard: t.string,
        rootHash: t.string,
        fileHash: t.string
    })
});
const configCodec = t.type({
    config: t.type({
        cell: t.string,
        address: t.string,
        globalBalance: t.type({
            coins: t.string
        })
    })
});
const sendCodec = t.type({
    status: t.number
});
const transactionsCodec = t.type({
    blocks: t.array(t.type({
        workchain: t.number,
        seqno: t.number,
        shard: t.string,
        rootHash: t.string,
        fileHash: t.string
    })),
    boc: t.string
});
